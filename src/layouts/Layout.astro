---
import { ViewTransitions } from "astro:transitions";
import "../styles/global.css";
import Footer from "../components/Footer";
import Header from "../components/Header";
import { siteConfig } from "../config/site";

export interface Props {
  title?: string;
  description?: string;
  permalink?: string;
}

const { title, description } = Astro.props;
const socialUrl = Astro.url.origin + siteConfig.ogImage;
---

<!doctype html>
<html lang="en">
  <head>
    <!-- Global Metadata -->
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Primary Meta Tags -->
    <title>{title ? `${title} | ${siteConfig.name}` : siteConfig.name}</title>
    <meta
      name="title"
      content={title ? `${title} | ${siteConfig.name}` : siteConfig.name}
    />
    <meta name="description" content={description || siteConfig.description} />
    <meta name="keywords" content="Cheat sheet" />
    <!-- Author -->
    <meta name="author" content={siteConfig.author} />
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta
      property="og:title"
      content={title ? `${title} | ${siteConfig.name}` : siteConfig.name}
    />
    <meta
      property="og:description"
      content={description || siteConfig.description}
    />
    <meta property="og:image" content={socialUrl} />
    <!-- Sitemap -->
    <link rel="sitemap" href="/sitemap-index.xml" />
    <!-- Others -->
    <meta name="generator" content={Astro.generator} />
    <!-- Favicon -->
    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5" />
    <meta name="msapplication-TileColor" content="#2d89ef" />
    <meta name="theme-color" content="#ffffff" />
    <!-- Astro View Transitions -->
    <ViewTransitions />
    <!-- Google Search Console -->
    <meta
      name="google-site-verification"
      content="R77j4Yua7vQlxrfOZkxc3YUGQpQP3s8hcp1cQvxbiR0"
    />
    <!-- Google AdSense -->
  </head>
  <body
    class="min-h-screen bg-background font-sans text-foreground antialiased"
  >
    <div class="flex min-h-screen flex-col">
      <Header client:only="react" />
      <main class="flex-1">
        <slot />
      </main>
      <Footer />
    </div>
    <script is:inline>
      //
      const setTheme = () => {
        const getThemePreference = () => {
          if (
            typeof localStorage !== "undefined" &&
            localStorage.getItem("theme")
          ) {
            return localStorage.getItem("theme");
          }
          return window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "light";
        };
        const isDark = getThemePreference() === "dark";
        document.documentElement.classList[isDark ? "add" : "remove"]("dark");

        if (typeof localStorage !== "undefined") {
          const observer = new MutationObserver(() => {
            const isDark = document.documentElement.classList.contains("dark");
            localStorage.setItem("theme", isDark ? "dark" : "light");
          });
          observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ["class"],
          });
        }
      };
      //
      const setCopyButton = () => {
        const pres = Array.from(document.querySelectorAll("pre"));
        for (const pre of pres) {
          const wrapper = document.createElement("div");
          wrapper.className = "relative";
          const button = document.createElement("button");
          button.className =
            "absolute top-0 right-0 m-2 inline-flex items-center justify-center whitespace-nowrap font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground shadow hover:bg-primary/90 h-8 rounded-md px-3 text-xs";
          button.innerHTML = "Copy";
          const code = pre.querySelector("code");

          if (code && pre && pre.parentNode) {
            pre.appendChild(button);
            pre.parentNode.insertBefore(wrapper, pre);
            wrapper.appendChild(pre);

            button.addEventListener("click", async () => {
              const text = code.innerText;
              try {
                await navigator.clipboard.writeText(text);
                button.innerText = "Copied";
                setTimeout(() => {
                  button.innerText = "Copy";
                }, 1000);
              } catch (err) {
                console.error("Failed to copy text: ", err);
              }
            });
          }
        }
      };
      //
      const setArticleFeatures = () => {
        //
        const addMargin = (tagName) => {
          const marginMap = {
            H3: "ml-2",
            H4: "ml-4",
            H5: "ml-6",
            H6: "ml-8",
          };

          if (
            tagName === "H3" ||
            tagName === "H4" ||
            tagName === "H5" ||
            tagName === "H6"
          )
            return marginMap[tagName];
          return "";
        };
        //
        const article = document.querySelector("article");
        if (!article) return;
        const headings = article.querySelectorAll("h2, h3, h4, h5, h6");
        const list = document.getElementById("article-list");
        if (list) {
          headings.forEach((heading) => {
            if (heading.textContent) {
              const id = heading.textContent.toLowerCase().replace(/\W/g, "-");
              heading.id = id;
              const li = document.createElement("li");
              li.setAttribute("class", addMargin(heading.tagName));
              const link = document.createElement("a");
              link.setAttribute("href", `#${id}`);
              link.setAttribute(
                "class",
                "flex items-center gap-x-2 text-muted-foreground hover:text-foreground",
              );
              link.textContent = heading.textContent;
              li.appendChild(link);
              list.appendChild(li);
            }
          });
        }
        //
      };
      //
      const initialize = () => {
        setCopyButton();
        setTheme();
        setArticleFeatures();
      };
      //
      window.addEventListener("DOMContentLoaded", initialize);
      //
      document.addEventListener("astro:after-swap", initialize);
    </script>
  </body>
</html>
