---
import Giscus from "@giscus/react";
import { Image } from "astro:assets";

export interface Props {
  category: string;
  title: string;
  description: string;
  id: string;
  imageUrl: ImageMetadata;
}

const { category, title, description, id, imageUrl } = Astro.props;

const repo = import.meta.env.REPO;
const repoId = import.meta.env.REPO_ID;
const categoryId = import.meta.env.CATEGORY_ID;
---

<div class="mx-auto min-h-screen max-w-7xl px-6 py-24 sm:py-32 lg:px-8">
  <div class="mx-auto max-w-2xl px-4 lg:max-w-none">
    <div class="relative flex items-start gap-x-16">
      <div class="flex-1 overflow-hidden">
        <!-- Content -->
        <div
          class="mx-auto w-full max-w-3xl text-base leading-7 text-foreground/70"
        >
          <p class="text-base font-semibold leading-7 text-primary">
            {category}
          </p>
          <h1
            class="mt-2 text-3xl font-bold tracking-tight text-foreground sm:text-4xl"
          >
            {title}
          </h1>
          <p class="mt-6 text-xl leading-8">
            {description}
          </p>
          <Image
            format="avif"
            src={imageUrl}
            alt={title}
            class="mt-6 aspect-[16/9] w-full rounded-2xl bg-muted object-cover sm:aspect-[2/1] lg:aspect-[3/2]"
            transition:name={`img-${id}`}
          />
          <slot />
          <div class="mt-18 md:mt-24">
            <Giscus
              id={id}
              repo={repo}
              repoId={repoId}
              category="Comments"
              categoryId={categoryId}
              mapping="url"
              term="Welcome!"
              reactionsEnabled="1"
              emitMetadata="0"
              inputPosition="top"
              theme="cobalt"
              lang="en"
              loading="lazy"
              client:only="react"
            />
          </div>
        </div>
      </div>

      <!-- Aside -->
      <aside
        class="sticky top-0 hidden h-dvh w-60 shrink-0 overflow-y-auto lg:block"
      >
        <p class="py-4 text-sm font-bold uppercase tracking-wide">
          On This Page
        </p>
        <ul class="space-y-2.5 py-2 text-sm leading-6" id="list"></ul>
      </aside>
    </div>
  </div>
</div>

<script is:inline>
  function addMargin(tagName) {
    const marginMap = {
      H3: "ml-2",
      H4: "ml-4",
      H5: "ml-6",
      H6: "ml-8",
    };

    if (
      tagName === "H3" ||
      tagName === "H4" ||
      tagName === "H5" ||
      tagName === "H6"
    )
      return marginMap[tagName];
    return "";
  }

  function addAnchor() {
    const headings = document.querySelectorAll("h2, h3, h4, h5, h6");
    const list = document.getElementById("list");
    if (list) {
      headings.forEach((heading) => {
        if (heading.textContent) {
          const id = heading.textContent.toLowerCase().replace(/\W/g, "-");
          heading.id = id;
          const li = document.createElement("li");
          li.setAttribute("class", addMargin(heading.tagName));
          const link = document.createElement("a");
          link.setAttribute("href", `#${id}`);
          link.setAttribute(
            "class",
            "flex items-center gap-x-2 text-muted-foreground hover:text-foreground",
          );
          link.textContent = heading.textContent;
          li.appendChild(link);
          list.appendChild(li);
        }
      });
    }
  }

  function highlightOnScroll() {
    const headings = document.querySelectorAll("h2, h3, h4, h5, h6");
    window.addEventListener("scroll", () => {
      const h = window.innerHeight;
      // Set the current section to the first heading
      let current = headings[0].id;
      let memo = headings[0].getBoundingClientRect().top - h;
      // Highlight the current heading in the list
      headings.forEach((heading) => {
        // The value of the top property of the bounding rectangle of the heading
        // is a negative number if the heading is above the viewport
        const elementTop = heading.getBoundingClientRect().top;
        const y = elementTop - h;
        if (y < 0 && y > memo) {
          memo = y;
          current = heading.id;
        }
      });

      const links = document.querySelectorAll("#list li a");
      links.forEach((link) => {
        if (link.getAttribute("href") === `#${current}`) {
          link.classList.add("text-primary");
          link.classList.remove(
            "text-muted-foreground",
            "hover:text-foreground",
          );
        } else {
          link.classList.add("text-muted-foreground", "hover:text-foreground");
          link.classList.remove("text-primary");
        }
      });
    });
  }

  addAnchor();
  highlightOnScroll();
</script>
